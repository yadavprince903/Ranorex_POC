///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyCRM.Recordings.Company.RG_006
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ValidateInputValuesCompanyTab recording.
    /// </summary>
    [TestModule("0fe928ee-30e4-4bdb-8d3a-5c3d25713a79", ModuleType.Recording, 1)]
    public partial class ValidateInputValuesCompanyTab : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::MyCRM.MyCRMRepository repository.
        /// </summary>
        public static global::MyCRM.MyCRMRepository repo = global::MyCRM.MyCRMRepository.Instance;

        static ValidateInputValuesCompanyTab instance = new ValidateInputValuesCompanyTab();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ValidateInputValuesCompanyTab()
        {
            ComapnyName = "";
            AddLine1 = "";
            AddLine2 = "";
            City = "";
            Zip = "";
            Main = "";
            Other = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ValidateInputValuesCompanyTab Instance
        {
            get { return instance; }
        }

#region Variables

        string _ComapnyName;

        /// <summary>
        /// Gets or sets the value of variable ComapnyName.
        /// </summary>
        [TestVariable("e014fd2a-2294-467d-9cbf-8c383a63edd4")]
        public string ComapnyName
        {
            get { return _ComapnyName; }
            set { _ComapnyName = value; }
        }

        string _AddLine1;

        /// <summary>
        /// Gets or sets the value of variable AddLine1.
        /// </summary>
        [TestVariable("30245ea2-19a6-41bd-8ed9-3086e40f7c3f")]
        public string AddLine1
        {
            get { return _AddLine1; }
            set { _AddLine1 = value; }
        }

        string _AddLine2;

        /// <summary>
        /// Gets or sets the value of variable AddLine2.
        /// </summary>
        [TestVariable("1556561b-a987-4d2d-afd4-6fe912017b11")]
        public string AddLine2
        {
            get { return _AddLine2; }
            set { _AddLine2 = value; }
        }

        string _City;

        /// <summary>
        /// Gets or sets the value of variable City.
        /// </summary>
        [TestVariable("70948fd6-a1df-4eba-b24f-e7e9d0db0fd3")]
        public string City
        {
            get { return _City; }
            set { _City = value; }
        }

        string _Zip;

        /// <summary>
        /// Gets or sets the value of variable Zip.
        /// </summary>
        [TestVariable("3b5b3c3d-c37b-487c-be75-f73d40eb9dc7")]
        public string Zip
        {
            get { return _Zip; }
            set { _Zip = value; }
        }

        string _Main;

        /// <summary>
        /// Gets or sets the value of variable Main.
        /// </summary>
        [TestVariable("1a650b31-f47f-4106-ad0e-df449d917083")]
        public string Main
        {
            get { return _Main; }
            set { _Main = value; }
        }

        string _Other;

        /// <summary>
        /// Gets or sets the value of variable Other.
        /// </summary>
        [TestVariable("a15e0e1e-a9c0-427d-8e20-c2c887d01e0a")]
        public string Other
        {
            get { return _Other; }
            set { _Other = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MyCRM.Navigation.Company' at Center.", repo.MyCRM.Navigation.CompanyInfo, new RecordItemIndex(0));
            repo.MyCRM.Navigation.Company.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ComapnyName' with focus on 'MyCRM.Company.CompanyName'.", repo.MyCRM.Company.CompanyNameInfo, new RecordItemIndex(1));
            repo.MyCRM.Company.CompanyName.PressKeys(ComapnyName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$ComapnyName) on item 'MyCRM.Company.CompanyName'.", repo.MyCRM.Company.CompanyNameInfo, new RecordItemIndex(2));
            Validate.AttributeEqual(repo.MyCRM.Company.CompanyNameInfo, "Text", ComapnyName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AddLine1' with focus on 'MyCRM.Company.TxtAddressLine1'.", repo.MyCRM.Company.TxtAddressLine1Info, new RecordItemIndex(3));
            repo.MyCRM.Company.TxtAddressLine1.PressKeys(AddLine1);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$AddLine1) on item 'MyCRM.Company.TxtAddressLine1'.", repo.MyCRM.Company.TxtAddressLine1Info, new RecordItemIndex(4));
            Validate.AttributeEqual(repo.MyCRM.Company.TxtAddressLine1Info, "Text", AddLine1);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'yourtext' with focus on 'MyCRM.Company.TxtAddressLine2'.", repo.MyCRM.Company.TxtAddressLine2Info, new RecordItemIndex(5));
            repo.MyCRM.Company.TxtAddressLine2.PressKeys("yourtext");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$AddLine2) on item 'MyCRM.Company.TxtAddressLine2'.", repo.MyCRM.Company.TxtAddressLine2Info, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.MyCRM.Company.TxtAddressLine2Info, "Text", AddLine2);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$City' with focus on 'MyCRM.Company.TxtCity'.", repo.MyCRM.Company.TxtCityInfo, new RecordItemIndex(7));
            repo.MyCRM.Company.TxtCity.PressKeys(City);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$City) on item 'MyCRM.Company.TxtCity'.", repo.MyCRM.Company.TxtCityInfo, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.MyCRM.Company.TxtCityInfo, "Text", City);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Zip' with focus on 'MyCRM.Company.TxtZip'.", repo.MyCRM.Company.TxtZipInfo, new RecordItemIndex(9));
            repo.MyCRM.Company.TxtZip.PressKeys(Zip);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Zip) on item 'MyCRM.Company.TxtZip'.", repo.MyCRM.Company.TxtZipInfo, new RecordItemIndex(10));
            Validate.AttributeEqual(repo.MyCRM.Company.TxtZipInfo, "Text", Zip);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Main) on item 'MyCRM.Company.TxtMain'.", repo.MyCRM.Company.TxtMainInfo, new RecordItemIndex(11));
            Validate.AttributeEqual(repo.MyCRM.Company.TxtMainInfo, "Text", Main);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Other) on item 'MyCRM.Company.TxtOther'.", repo.MyCRM.Company.TxtOtherInfo, new RecordItemIndex(12));
            Validate.AttributeEqual(repo.MyCRM.Company.TxtOtherInfo, "Text", Other);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
