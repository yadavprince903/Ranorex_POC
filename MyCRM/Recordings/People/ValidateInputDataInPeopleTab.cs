///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyCRM.Recordings.People
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ValidateInputDataInPeopleTab recording.
    /// </summary>
    [TestModule("182187fd-5a61-4b61-9a11-0a71a1a01bb9", ModuleType.Recording, 1)]
    public partial class ValidateInputDataInPeopleTab : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::MyCRM.MyCRMRepository repository.
        /// </summary>
        public static global::MyCRM.MyCRMRepository repo = global::MyCRM.MyCRMRepository.Instance;

        static ValidateInputDataInPeopleTab instance = new ValidateInputDataInPeopleTab();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ValidateInputDataInPeopleTab()
        {
            First = "";
            Last = "";
            Addressline1 = "";
            Addressline2 = "";
            City = "";
            Zip = "";
            Home = "";
            Work = "";
            Mobile = "";
            Personalmail = "";
            Workmail = "";
            Comments = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ValidateInputDataInPeopleTab Instance
        {
            get { return instance; }
        }

#region Variables

        string _First;

        /// <summary>
        /// Gets or sets the value of variable First.
        /// </summary>
        [TestVariable("ea5d48d1-a77c-4bfb-a42f-bc5b0f0d9220")]
        public string First
        {
            get { return _First; }
            set { _First = value; }
        }

        string _Last;

        /// <summary>
        /// Gets or sets the value of variable Last.
        /// </summary>
        [TestVariable("b86e07f9-6016-4bc4-aa1d-f60bc4e0c011")]
        public string Last
        {
            get { return _Last; }
            set { _Last = value; }
        }

        string _Addressline1;

        /// <summary>
        /// Gets or sets the value of variable Addressline1.
        /// </summary>
        [TestVariable("34a799b8-e330-475d-96c3-0d4a5484c633")]
        public string Addressline1
        {
            get { return _Addressline1; }
            set { _Addressline1 = value; }
        }

        string _Addressline2;

        /// <summary>
        /// Gets or sets the value of variable Addressline2.
        /// </summary>
        [TestVariable("eabd320d-6722-44b9-b753-8f68a3b6880c")]
        public string Addressline2
        {
            get { return _Addressline2; }
            set { _Addressline2 = value; }
        }

        string _City;

        /// <summary>
        /// Gets or sets the value of variable City.
        /// </summary>
        [TestVariable("39694936-b76b-4e96-9513-46ac78ef58a8")]
        public string City
        {
            get { return _City; }
            set { _City = value; }
        }

        string _Zip;

        /// <summary>
        /// Gets or sets the value of variable Zip.
        /// </summary>
        [TestVariable("dddc0363-7b5b-4fbd-b17c-e2138218512b")]
        public string Zip
        {
            get { return _Zip; }
            set { _Zip = value; }
        }

        string _Home;

        /// <summary>
        /// Gets or sets the value of variable Home.
        /// </summary>
        [TestVariable("ec149052-780c-4020-b858-81f8799db0eb")]
        public string Home
        {
            get { return _Home; }
            set { _Home = value; }
        }

        string _Work;

        /// <summary>
        /// Gets or sets the value of variable Work.
        /// </summary>
        [TestVariable("37476ffa-5a8b-4807-a209-261eac233e17")]
        public string Work
        {
            get { return _Work; }
            set { _Work = value; }
        }

        string _Mobile;

        /// <summary>
        /// Gets or sets the value of variable Mobile.
        /// </summary>
        [TestVariable("510a55a1-4b62-442a-85d1-a2797796a65c")]
        public string Mobile
        {
            get { return _Mobile; }
            set { _Mobile = value; }
        }

        string _Personalmail;

        /// <summary>
        /// Gets or sets the value of variable Personalmail.
        /// </summary>
        [TestVariable("ff1d802c-74d2-4945-a020-30eb94b8aad8")]
        public string Personalmail
        {
            get { return _Personalmail; }
            set { _Personalmail = value; }
        }

        string _Workmail;

        /// <summary>
        /// Gets or sets the value of variable Workmail.
        /// </summary>
        [TestVariable("7c612d30-43f0-4d30-b4ae-d96d7962a8c7")]
        public string Workmail
        {
            get { return _Workmail; }
            set { _Workmail = value; }
        }

        string _Comments;

        /// <summary>
        /// Gets or sets the value of variable Comments.
        /// </summary>
        [TestVariable("c95ec08d-4f67-4cf9-968b-1b7fc60480b1")]
        public string Comments
        {
            get { return _Comments; }
            set { _Comments = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            //Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(0));
            //Delay.Duration(10000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$First' with focus on 'MyCRM.People.First'.", repo.MyCRM.People.FirstInfo, new RecordItemIndex(1));
            repo.MyCRM.People.First.PressKeys(First);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$First) on item 'MyCRM.People.First'.", repo.MyCRM.People.FirstInfo, new RecordItemIndex(2));
            Validate.AttributeEqual(repo.MyCRM.People.FirstInfo, "Text", First);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Last' with focus on 'MyCRM.People.Last'.", repo.MyCRM.People.LastInfo, new RecordItemIndex(3));
            repo.MyCRM.People.Last.PressKeys(Last);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Last) on item 'MyCRM.People.Last'.", repo.MyCRM.People.LastInfo, new RecordItemIndex(4));
            Validate.AttributeEqual(repo.MyCRM.People.LastInfo, "Text", Last);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MyCRM.People.Male' at Center.", repo.MyCRM.People.MaleInfo, new RecordItemIndex(5));
            repo.MyCRM.People.Male.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Checked='True') on item 'MyCRM.People.Male'.", repo.MyCRM.People.MaleInfo, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.MyCRM.People.MaleInfo, "Checked", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Addressline1' with focus on 'MyCRM.People.Addressline1'.", repo.MyCRM.People.Addressline1Info, new RecordItemIndex(7));
            repo.MyCRM.People.Addressline1.PressKeys(Addressline1);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Addressline1) on item 'MyCRM.People.Addressline1'.", repo.MyCRM.People.Addressline1Info, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.MyCRM.People.Addressline1Info, "Text", Addressline1);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Addressline2' with focus on 'MyCRM.People.Addressline2'.", repo.MyCRM.People.Addressline2Info, new RecordItemIndex(9));
            repo.MyCRM.People.Addressline2.PressKeys(Addressline2);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Addressline2) on item 'MyCRM.People.Addressline2'.", repo.MyCRM.People.Addressline2Info, new RecordItemIndex(10));
            Validate.AttributeEqual(repo.MyCRM.People.Addressline2Info, "Text", Addressline2);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$City' with focus on 'MyCRM.People.City'.", repo.MyCRM.People.CityInfo, new RecordItemIndex(11));
            repo.MyCRM.People.City.PressKeys(City);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$City) on item 'MyCRM.People.City'.", repo.MyCRM.People.CityInfo, new RecordItemIndex(12));
            Validate.AttributeEqual(repo.MyCRM.People.CityInfo, "Text", City);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='NY') on item 'MyCRM.People.State'.", repo.MyCRM.People.StateInfo, new RecordItemIndex(13));
            Validate.AttributeEqual(repo.MyCRM.People.StateInfo, "Text", "NY");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Zip' with focus on 'MyCRM.People.Zip'.", repo.MyCRM.People.ZipInfo, new RecordItemIndex(14));
            repo.MyCRM.People.Zip.PressKeys(Zip);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Zip) on item 'MyCRM.People.Zip'.", repo.MyCRM.People.ZipInfo, new RecordItemIndex(15));
            Validate.AttributeEqual(repo.MyCRM.People.ZipInfo, "Text", Zip);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Home' with focus on 'MyCRM.People.Home'.", repo.MyCRM.People.HomeInfo, new RecordItemIndex(16));
            repo.MyCRM.People.Home.PressKeys(Home);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Home) on item 'MyCRM.People.Home'.", repo.MyCRM.People.HomeInfo, new RecordItemIndex(17));
            Validate.AttributeEqual(repo.MyCRM.People.HomeInfo, "Text", Home);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Work' with focus on 'MyCRM.People.Work'.", repo.MyCRM.People.WorkInfo, new RecordItemIndex(18));
            repo.MyCRM.People.Work.PressKeys(Work);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Work) on item 'MyCRM.People.Work'.", repo.MyCRM.People.WorkInfo, new RecordItemIndex(19));
            Validate.AttributeEqual(repo.MyCRM.People.WorkInfo, "Text", Work);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Mobile' with focus on 'MyCRM.People.Mobile'.", repo.MyCRM.People.MobileInfo, new RecordItemIndex(20));
            repo.MyCRM.People.Mobile.PressKeys(Mobile);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Mobile) on item 'MyCRM.People.Mobile'.", repo.MyCRM.People.MobileInfo, new RecordItemIndex(21));
            Validate.AttributeEqual(repo.MyCRM.People.MobileInfo, "Text", Mobile);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Personalmail' with focus on 'MyCRM.People.Personalmail'.", repo.MyCRM.People.PersonalmailInfo, new RecordItemIndex(22));
            repo.MyCRM.People.Personalmail.PressKeys(Personalmail);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Personalmail) on item 'MyCRM.People.Personalmail'.", repo.MyCRM.People.PersonalmailInfo, new RecordItemIndex(23));
            Validate.AttributeEqual(repo.MyCRM.People.PersonalmailInfo, "Text", Personalmail);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Workmail' with focus on 'MyCRM.People.Workmail'.", repo.MyCRM.People.WorkmailInfo, new RecordItemIndex(24));
            repo.MyCRM.People.Workmail.PressKeys(Workmail);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Workmail) on item 'MyCRM.People.Workmail'.", repo.MyCRM.People.WorkmailInfo, new RecordItemIndex(25));
            Validate.AttributeEqual(repo.MyCRM.People.WorkmailInfo, "Text", Workmail);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MyCRM.People.Active' at Center.", repo.MyCRM.People.ActiveInfo, new RecordItemIndex(26));
            repo.MyCRM.People.Active.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (CheckState='Checked') on item 'MyCRM.People.Active'.", repo.MyCRM.People.ActiveInfo, new RecordItemIndex(27));
            Validate.AttributeEqual(repo.MyCRM.People.ActiveInfo, "CheckState", "Checked");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Comments' with focus on 'MyCRM.People.Comments'.", repo.MyCRM.People.CommentsInfo, new RecordItemIndex(28));
            repo.MyCRM.People.Comments.PressKeys(Comments);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Comments) on item 'MyCRM.People.Comments'.", repo.MyCRM.People.CommentsInfo, new RecordItemIndex(29));
            Validate.AttributeEqual(repo.MyCRM.People.CommentsInfo, "Text", Comments);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
